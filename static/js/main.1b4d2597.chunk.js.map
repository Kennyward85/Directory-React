{"version":3,"sources":["components/Search/search.js","components/Table/TableSet.js","App.js","serviceWorker.js","index.js"],"names":["SearchTable","props","onSubmit","submit","type","placeholder","value","searchTerm","onChange","change","TableSet","Table","striped","bordered","hover","variant","className","onClick","sort","users","map","user","key","id","name","first","last","email","login","username","location","city","state","phone","App","componentDidMount","axios","get","then","data","console","log","results","setState","catch","err","onInputChange","event","preventDefault","newInput","target","onSearchSubmit","userInput","toLowerCase","searchResults","i","length","push","sortArray","ascend","field","a","b","Container","this","React","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.1b4d2597.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst SearchTable = (props) => {\r\n  \r\n  // form created from React-bootstrap\r\n  \r\n  return (\r\n    <div>\r\n      <p>Search by Either First or Last Name:</p>\r\n      <form onSubmit={props.submit}>\r\n        <input  type=\"text\"  placeholder=\"Search Table\" value={props.searchTerm} onChange={props.change}/>\r\n        <input type =\"submit\" value=\"Submit\"/>\r\n      </form>\r\n    </div>\r\n  );\r\n              \r\n}\r\n  \r\n  export default SearchTable;\r\n","import React from 'react';\r\nimport Table from 'react-bootstrap/table';\r\n\r\n\r\n  \r\nconst TableSet = (props) => {\r\n   \r\n      return (\r\n         \r\n        // Sorting Array in ascending or Descending order on click for all headers but phone number\r\n        // Using sortArray \r\n        <Table striped bordered hover variant='dark'>\r\n            <thead>\r\n                <tr>\r\n                    <th className=\"first\" onClick={props.sort} >First Name</th>\r\n                    <th className= 'last' onClick= {props.sort}>Last Name</th>\r\n                    <th className= 'email' onClick={props.sort}>Email</th>\r\n                    <th className= 'username' onClick={props.sort}>Username</th>\r\n                    <th className= 'city' onClick={props.sort}>city</th>\r\n                    <th className= 'state' onClick={props.sort}>State</th>\r\n                    <th >Phone</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n            {props.users.map(user => {\r\n                \r\n            return    <tr key={props.users.id}> \r\n                   <td>{user.name.first}</td>\r\n                   <td>{user.name.last}</td>\r\n                   <td>{user.email}</td>\r\n                   <td>{user.login.username}</td>\r\n                   <td>{user.location.city}</td>\r\n                   <td>{user.location.state}</td>\r\n                   <td>{user.phone}</td>\r\n               </tr>})}\r\n            </tbody>\r\n        </Table>\r\n    )\r\n}\r\n\r\nexport default TableSet;","import React from 'react';\nimport axios from 'axios';\nimport SearchTable from \"./components/Search/search\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/container';\nimport TableSet from \"./components/Table/TableSet\";\n\n\nclass App extends React.Component {\n  state = {\n    users:[],\n    searchTerm: '',\n  }\n\n \n// Loading Data from remote endpoint \ncomponentDidMount = () => {\n  axios.get(`https://randomuser.me/api/?results=20&nat=us`)\n      .then(data => {\n        console.log(data.data.results);\n        this.setState({ users : data.data.results})\n      })\n      .catch(err => console.log(err));   \n  } \n  \n  onInputChange = (event) => {\n    event.preventDefault();\n    let newInput = event.target.value;\n    this.setState({searchTerm : newInput})\n  }\n  \n  onSearchSubmit = (event) => {\n    event.preventDefault();\n    let userInput = this.state.searchTerm.toLowerCase();\n    console.log(this.state.searchTerm);\n   \n    let searchResults = [];\n    for(let i = 0; i < this.state.users.length; i++) {\n      if(this.state.users[i].name.first.toLowerCase() === userInput ||  this.state.users[i].name.last.toLowerCase() === userInput) {\n        searchResults.push(this.state.users[i])\n      }\n    }\n    this.setState({users: searchResults})\n  }\n       \n  sortArray = (event) => {\n    console.log(event.target.className);\n    let field = event.target.className\n    let ascend;\n    if (field === 'last' || field === 'first') {\n      ascend = this.state.users.sort((a,b) => (a.name[field] > b.name[field]) ?  1 : ((b.name[field] > a.name[field]) ?  -1 : 0));\n    } else if (field === 'city' || field === 'state') {\n      ascend = this.state.users.sort((a,b) => (a.location[field] > b.location[field]) ?  1 : ((b.location[field] > a.location[field]) ?  -1 : 0));\n    } else if(field === 'username') {\n      ascend = this.state.users.sort((a,b) => (a.login[field] > b.login[field]) ?  1 : ((b.login[field] > a.login[field]) ?  -1 : 0));\n    } else {\n     ascend = this.state.users.sort((a,b) => (a[field] > b[field]) ?  1 : ((b[field] > a[field]) ?  -1 : 0));\n    }\n    this.setState({users: ascend})\n  }   \n  \n render () {\n \n  return (\n    <div className=\"App\">\n      <br/><br/><br/><br/>\n      <Container>\n        <SearchTable submit={this.onSearchSubmit} change={this.onInputChange} searchTerm={this.state.searchTerm}/>\n        <TableSet users={this.state.users} sort={this.sortArray}/>\n      </Container> \n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}